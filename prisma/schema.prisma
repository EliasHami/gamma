// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductCapacity {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    subFamily   ProductSubFamily @relation(fields: [subFamilyId], references: [id])
    subFamilyId String
    productNeeds ProductNeed[]
}

model ProductSubFamily {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    capacities ProductCapacity[]
    family   ProductFamily @relation(fields: [familyId], references: [id])
    familyId String
    productNeeds ProductNeed[]
}

model ProductFamily {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    subFamilies ProductSubFamily[]
    productNeeds ProductNeed[]
}

enum DEPARTMENT {
    EQUIPEMENT
    DOMICILE
}

enum VALIDATION_STATE {
  VALIDATED
  NOT_VALIDATED
}

model ProductNeed {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    department DEPARTMENT
    family   ProductFamily @relation(fields: [familyId], references: [id])
    familyId String
    subFamily   ProductSubFamily @relation(fields: [subFamilyId], references: [id])
    subFamilyId String
    capacity   ProductCapacity @relation(fields: [capacityId], references: [id])
    capacityId String
    color     String?
    country  String
    targetPublicPrice Float
    state    VALIDATION_STATE
    results   ProductResult[]
    additionalCost Float
    customsTax Float
}

enum YESNO {
    YES
    NO
}

enum SUPPLIER_STATUSES {
    OPEN
    CLOSED
    PREFERRED
	@@map("STATUSES")
}

model Supplier {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    email     String
    phone     String
    country   String
    validation YESNO
    status    SUPPLIER_STATUSES
    results   ProductResult[]
}

enum CURRENCIES {
  USD
  EURO
}

enum RESULT_STATUSES {
    OPEN
    CLOSED
    ACTIVE
    COMPETITOR
}

model ProductResult {
  id        String   @id @default(cuid())
  need  ProductNeed @relation(fields: [needId], references: [id], onDelete: Cascade)
  needId  String
  supplier Supplier  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId String
  fobPrice  Float
  currency  CURRENCIES
  validation YESNO
  status  RESULT_STATUSES 
  image Json
}

model Company {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  name      String
  address   String
  email     String
  phone     String
  insuranceRate Float
  bankChargeRate Float
  customsRate Float
  VATRate Float
  country   String
}