// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model ProductCharacteristic {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    name      String
    type      CHARACTERISTIC_FIELD_TYPE
    unit      UNIT_OF_MEASURE?
    subFamily   ProductSubFamily @relation(fields: [subFamilyId], references: [id], onDelete: Cascade)
    subFamilyId String
    @@index([subFamilyId])
}

model ProductSubFamily {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    name      String
    characteristics ProductCharacteristic[]
    family   ProductFamily @relation(fields: [familyId], references: [id], onDelete: Cascade)
    familyId String
    productNeeds ProductNeed[]
    @@index([familyId])
}

model ProductFamily {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    name      String
    subFamilies ProductSubFamily[]
    productNeeds ProductNeed[]
}

enum DEPARTMENT {
    EQUIPEMENT
    DOMICILE
}

enum VALIDATION_STATE {
  VALIDATED
  NOT_VALIDATED
}

model ProductNeed {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    name      String
    department DEPARTMENT
    family   ProductFamily? @relation(fields: [familyId], references: [id], onDelete: SetNull)
    familyId String?
    subFamily   ProductSubFamily? @relation(fields: [subFamilyId], references: [id], onDelete: SetNull)
    subFamilyId String?
    characteristicValues Json
    country  String
    targetPublicPrice Float
    state    VALIDATION_STATE
    offers   Offer[]
    additionalCost Float
    customsTax Float
    @@index(familyId)
    @@index(subFamilyId)
}

enum YESNO {
    YES
    NO
}

enum SUPPLIER_STATUSES {
    EMAIL_SENT
    CATALOGUE_RECEIVED
    PRICE_LIST_RECEIVED
}

model Supplier {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    name      String
    email     String
    phone     String
    country   String
    status    SUPPLIER_STATUSES
    offers   Offer[]
}

enum OFFER_STATUSES {
    OPEN
    CLOSED
    ACTIVE // on achet√© chez ce fournisseur
}

model Offer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  need  ProductNeed @relation(fields: [needId], references: [id], onDelete: Cascade)
  needId  String
  supplier Supplier  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId String
  fobPrice  Float
  currency  String
  validation YESNO
  status  OFFER_STATUSES 
  images Json?
  quantityPerContainer Int
  date DateTime
  ddpPrice Float
  grossPrice Float
  publicPrice Float
  @@index(needId)
  @@index(supplierId)
}

model Company {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  name      String
  address   String
  email     String
  phone     String
  currency  String
  insuranceRate Float
  bankChargeRate Float
  customsRate Float
  VATRate Float
  country   String
  margin Float
}

model Freight {
  id       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  country String
  price   Float
}

enum CHARACTERISTIC_FIELD_TYPE {
  TEXT
  NUMBER
}

enum UNIT_OF_MEASURE {
  METER
  KILOMETER
  CENTIMETER
  INCH
  FOOT
  MILE
  GRAM
  KILOGRAM
  MILLIGRAM
  POUND
  OUNCE
  LITER
  MILLILITER
  CUBIC_METER
  CUBIC_CENTIMETER
  GALLON
  SECOND
  MINUTE
  HOUR
  DAY
  CELSIUS
  FAHRENHEIT
  KELVIN
  SQUARE_METER
  SQUARE_KILOMETER
  SQUARE_FOOT
  ACRE
  METERS_PER_SECOND
  KILOMETERS_PER_HOUR
  MILES_PER_HOUR
  JOULE
  CALORIE
  KILOCALORIE
  WATT
  KILOWATT
  HORSEPOWER
  PASCAL
  ATMOSPHERE
  BAR
  MILLIMETER_OF_MERCURY
}
